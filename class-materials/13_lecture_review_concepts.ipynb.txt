{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Data visualiztion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "── \u001b[1mAttaching packages\u001b[22m ─────────────────────────────────────── tidyverse 1.2.1 ──\n",
      "\u001b[32m✔\u001b[39m \u001b[34mggplot2\u001b[39m 3.2.0     \u001b[32m✔\u001b[39m \u001b[34mpurrr  \u001b[39m 0.3.2\n",
      "\u001b[32m✔\u001b[39m \u001b[34mtibble \u001b[39m 2.1.3     \u001b[32m✔\u001b[39m \u001b[34mdplyr  \u001b[39m 0.8.3\n",
      "\u001b[32m✔\u001b[39m \u001b[34mtidyr  \u001b[39m 0.8.3     \u001b[32m✔\u001b[39m \u001b[34mstringr\u001b[39m 1.4.0\n",
      "\u001b[32m✔\u001b[39m \u001b[34mreadr  \u001b[39m 1.3.1     \u001b[32m✔\u001b[39m \u001b[34mforcats\u001b[39m 0.4.0\n",
      "── \u001b[1mConflicts\u001b[22m ────────────────────────────────────────── tidyverse_conflicts() ──\n",
      "\u001b[31m✖\u001b[39m \u001b[34mdplyr\u001b[39m::\u001b[32mfilter()\u001b[39m masks \u001b[34mstats\u001b[39m::filter()\n",
      "\u001b[31m✖\u001b[39m \u001b[34mdplyr\u001b[39m::\u001b[32mlag()\u001b[39m    masks \u001b[34mstats\u001b[39m::lag()\n"
     ]
    }
   ],
   "source": [
    "library('tidyverse')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "`ggplot2`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAeAAAAFoCAMAAAC46dgSAAADAFBMVEUAAAABAQECAgIDAwME\nBAQFBQUGBgYHBwcICAgJCQkKCgoLCwsMDAwNDQ0ODg4PDw8QEBARERESEhITExMUFBQVFRUW\nFhYXFxcYGBgZGRkaGhobGxscHBwdHR0eHh4fHx8gICAhISEiIiIjIyMkJCQlJSUmJiYnJyco\nKCgpKSkqKiorKyssLCwtLS0uLi4vLy8wMDAxMTEyMjIzMzM0NDQ1NTU2NjY3Nzc4ODg5OTk6\nOjo7Ozs8PDw9PT0+Pj4/Pz9AQEBBQUFCQkJDQ0NERERFRUVGRkZHR0dISEhJSUlKSkpLS0tM\nTExNTU1OTk5PT09QUFBRUVFSUlJTU1NUVFRVVVVWVlZXV1dYWFhZWVlaWlpbW1tcXFxdXV1e\nXl5fX19gYGBhYWFiYmJjY2NkZGRlZWVmZmZnZ2doaGhpaWlqampra2tsbGxtbW1ubm5vb29w\ncHBxcXFycnJzc3N0dHR1dXV2dnZ3d3d4eHh5eXl6enp7e3t8fHx9fX1+fn5/f3+AgICBgYGC\ngoKDg4OEhISFhYWGhoaHh4eIiIiJiYmKioqLi4uMjIyNjY2Ojo6Pj4+QkJCRkZGSkpKTk5OU\nlJSVlZWWlpaXl5eYmJiZmZmampqbm5ucnJydnZ2enp6fn5+goKChoaGioqKjo6OkpKSlpaWm\npqanp6eoqKipqamqqqqrq6usrKytra2urq6vr6+wsLCxsbGysrKzs7O0tLS1tbW2tra3t7e4\nuLi5ubm6urq7u7u8vLy9vb2+vr6/v7/AwMDBwcHCwsLDw8PExMTFxcXGxsbHx8fIyMjJycnK\nysrLy8vMzMzNzc3Ozs7Pz8/Q0NDR0dHS0tLT09PU1NTV1dXW1tbX19fY2NjZ2dna2trb29vc\n3Nzd3d3e3t7f39/g4ODh4eHi4uLj4+Pk5OTl5eXm5ubn5+fo6Ojp6enq6urr6+vs7Ozt7e3u\n7u7v7+/w8PDx8fHy8vLz8/P09PT19fX29vb39/f4+Pj5+fn6+vr7+/v8/Pz9/f3+/v7////i\nsF19AAAACXBIWXMAABJ0AAASdAHeZh94AAAgAElEQVR4nO2deWAURfbHOyGEI9w3IrLgAoKI\nroAiIAvrrqISTgMYEiAI7HLL4YLiuiAmURCDoIjwU0QFFLwBZbmUQw65IpcGCEJIyNEKIQk5\n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",
      "text/plain": [
       "plot without title"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "options(repr.plot.width = 4, repr.plot.height = 3)\n",
    "p = ggplot(mpg, aes(x = displ, y = cty))\n",
    "\n",
    "p = p + geom_point()\n",
    "\n",
    "p"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Data split-apply-combine"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "`dplyr`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "- mutate\n",
    "- summarize\n",
    "- group_by\n",
    "- arrange"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[38;5;246m# A tibble: 15 x 2\u001b[39m\n",
      "   manufacturer median.cty\n",
      "   \u001b[3m\u001b[38;5;246m<chr>\u001b[39m\u001b[23m             \u001b[3m\u001b[38;5;246m<dbl>\u001b[39m\u001b[23m\n",
      "\u001b[38;5;250m 1\u001b[39m audi               17.5\n",
      "\u001b[38;5;250m 2\u001b[39m chevrolet          15  \n",
      "\u001b[38;5;250m 3\u001b[39m dodge              13  \n",
      "\u001b[38;5;250m 4\u001b[39m ford               14  \n",
      "\u001b[38;5;250m 5\u001b[39m honda              24  \n",
      "\u001b[38;5;250m 6\u001b[39m hyundai            18.5\n",
      "\u001b[38;5;250m 7\u001b[39m jeep               14  \n",
      "\u001b[38;5;250m 8\u001b[39m land rover         11.5\n",
      "\u001b[38;5;250m 9\u001b[39m lincoln            11  \n",
      "\u001b[38;5;250m10\u001b[39m mercury            13  \n",
      "\u001b[38;5;250m11\u001b[39m nissan             19  \n",
      "\u001b[38;5;250m12\u001b[39m pontiac            17  \n",
      "\u001b[38;5;250m13\u001b[39m subaru             19  \n",
      "\u001b[38;5;250m14\u001b[39m toyota             18  \n",
      "\u001b[38;5;250m15\u001b[39m volkswagen         21  \n"
     ]
    }
   ],
   "source": [
    "mpg %>%\n",
    "    group_by(manufacturer) %>%\n",
    "    summarize(median.cty = median(cty)) %>%\n",
    "    print"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Data I/O"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "`readr`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "- read_csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[38;5;246m# A tibble: 171 x 7\u001b[39m\n",
      "    year name                 country     time    race.time MF    country.simple\n",
      "   \u001b[3m\u001b[38;5;246m<dbl>\u001b[39m\u001b[23m \u001b[3m\u001b[38;5;246m<chr>\u001b[39m\u001b[23m                \u001b[3m\u001b[38;5;246m<chr>\u001b[39m\u001b[23m       \u001b[3m\u001b[38;5;246m<chr>\u001b[39m\u001b[23m       \u001b[3m\u001b[38;5;246m<dbl>\u001b[39m\u001b[23m \u001b[3m\u001b[38;5;246m<chr>\u001b[39m\u001b[23m \u001b[3m\u001b[38;5;246m<chr>\u001b[39m\u001b[23m         \n",
      "\u001b[38;5;250m 1\u001b[39m  \u001b[4m2\u001b[24m019 Lawrence Cherono     Kenya       2H 7M …      2.13 Men's Kenya         \n",
      "\u001b[38;5;250m 2\u001b[39m  \u001b[4m2\u001b[24m018 Yuki Kawauchi        Japan       2H 15M…      2.27 Men's Japan         \n",
      "\u001b[38;5;250m 3\u001b[39m  \u001b[4m2\u001b[24m017 Geoffrey Kirui       Kenya       2H 9M …      2.16 Men's Kenya         \n",
      "\u001b[38;5;250m 4\u001b[39m  \u001b[4m2\u001b[24m016 Lemi Berhanu         Ethiopia    2H 12M…      2.21 Men's Ethiopia      \n",
      "\u001b[38;5;250m 5\u001b[39m  \u001b[4m2\u001b[24m015 Lelisa Desisa        Ethiopia    2H 9M …      2.15 Men's Ethiopia      \n",
      "\u001b[38;5;250m 6\u001b[39m  \u001b[4m2\u001b[24m014 \u001b[38;5;246m\"\u001b[39mMebrahtom \\\"Meb\\\" … United Sta… 2H 8M …      2.14 Men's United States \n",
      "\u001b[38;5;250m 7\u001b[39m  \u001b[4m2\u001b[24m013 Lelisa Desisa        Ethiopia    2H 10M…      2.17 Men's Ethiopia      \n",
      "\u001b[38;5;250m 8\u001b[39m  \u001b[4m2\u001b[24m012 Wesley Korir         Kenya       2H 12M…      2.21 Men's Kenya         \n",
      "\u001b[38;5;250m 9\u001b[39m  \u001b[4m2\u001b[24m011 Geoffrey Mutai       Kenya       2H 3M …      2.05 Men's Kenya         \n",
      "\u001b[38;5;250m10\u001b[39m  \u001b[4m2\u001b[24m010 Robert Kiprono Cher… Kenya       2H 5M …      2.10 Men's Kenya         \n",
      "\u001b[38;5;246m# … with 161 more rows\u001b[39m\n"
     ]
    }
   ],
   "source": [
    "col_types = cols(\n",
    "  year = col_double(),\n",
    "  name = col_character(),\n",
    "  country = col_character(),\n",
    "  time = col_character(),\n",
    "  race.time = col_double(),\n",
    "  MF = col_character(),\n",
    "  country.simple = col_character()\n",
    ")\n",
    "\n",
    "read_csv(\n",
    "    'https://github.com/chuckpr/BIOS512/raw/master/in-class-exercises/data/marathon.csv',\n",
    "    col_types = col_types\n",
    ") %>% print"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Data ordering"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "`forcats`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "- fct_infreq\n",
    "- fct_lump\n",
    "- fct_reorder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ol class=list-inline>\n",
       "\t<li>'United States'</li>\n",
       "\t<li>'Kenya'</li>\n",
       "\t<li>'Canada'</li>\n",
       "\t<li>'Ethiopia'</li>\n",
       "\t<li>'Japan'</li>\n",
       "\t<li>'Other'</li>\n",
       "</ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'United States'\n",
       "\\item 'Kenya'\n",
       "\\item 'Canada'\n",
       "\\item 'Ethiopia'\n",
       "\\item 'Japan'\n",
       "\\item 'Other'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'United States'\n",
       "2. 'Kenya'\n",
       "3. 'Canada'\n",
       "4. 'Ethiopia'\n",
       "5. 'Japan'\n",
       "6. 'Other'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] \"United States\" \"Kenya\"         \"Canada\"        \"Ethiopia\"     \n",
       "[5] \"Japan\"         \"Other\"        "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "read_csv(\n",
    "    'https://github.com/chuckpr/BIOS512/raw/master/in-class-exercises/data/marathon.csv',\n",
    "    col_types = col_types\n",
    ") %>%\n",
    "    mutate(country = fct_infreq(country) %>% fct_lump(n = 5)) %>%\n",
    "    .$country %>%\n",
    "    levels"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Data joins and reshaping"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "`dplyr` and `tidyr`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "- left_join\n",
    "- right_join\n",
    "- inner_join\n",
    "- full_join\n",
    "- gather\n",
    "- spread"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[38;5;246m# A tibble: 336,776 x 19\u001b[39m\n",
      "    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n",
      "   \u001b[3m\u001b[38;5;246m<int>\u001b[39m\u001b[23m \u001b[3m\u001b[38;5;246m<int>\u001b[39m\u001b[23m \u001b[3m\u001b[38;5;246m<int>\u001b[39m\u001b[23m    \u001b[3m\u001b[38;5;246m<int>\u001b[39m\u001b[23m          \u001b[3m\u001b[38;5;246m<int>\u001b[39m\u001b[23m     \u001b[3m\u001b[38;5;246m<dbl>\u001b[39m\u001b[23m    \u001b[3m\u001b[38;5;246m<int>\u001b[39m\u001b[23m          \u001b[3m\u001b[38;5;246m<int>\u001b[39m\u001b[23m\n",
      "\u001b[38;5;250m 1\u001b[39m  \u001b[4m2\u001b[24m013     1     1      517            515         2      830            819\n",
      "\u001b[38;5;250m 2\u001b[39m  \u001b[4m2\u001b[24m013     1     1      533            529         4      850            830\n",
      "\u001b[38;5;250m 3\u001b[39m  \u001b[4m2\u001b[24m013     1     1      542            540         2      923            850\n",
      "\u001b[38;5;250m 4\u001b[39m  \u001b[4m2\u001b[24m013     1     1      544            545        -\u001b[31m1\u001b[39m     \u001b[4m1\u001b[24m004           \u001b[4m1\u001b[24m022\n",
      "\u001b[38;5;250m 5\u001b[39m  \u001b[4m2\u001b[24m013     1     1      554            600        -\u001b[31m6\u001b[39m      812            837\n",
      "\u001b[38;5;250m 6\u001b[39m  \u001b[4m2\u001b[24m013     1     1      554            558        -\u001b[31m4\u001b[39m      740            728\n",
      "\u001b[38;5;250m 7\u001b[39m  \u001b[4m2\u001b[24m013     1     1      555            600        -\u001b[31m5\u001b[39m      913            854\n",
      "\u001b[38;5;250m 8\u001b[39m  \u001b[4m2\u001b[24m013     1     1      557            600        -\u001b[31m3\u001b[39m      709            723\n",
      "\u001b[38;5;250m 9\u001b[39m  \u001b[4m2\u001b[24m013     1     1      557            600        -\u001b[31m3\u001b[39m      838            846\n",
      "\u001b[38;5;250m10\u001b[39m  \u001b[4m2\u001b[24m013     1     1      558            600        -\u001b[31m2\u001b[39m      753            745\n",
      "\u001b[38;5;246m# … with 336,766 more rows, and 11 more variables: arr_delay \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m,\n",
      "#   carrier \u001b[3m\u001b[38;5;246m<chr>\u001b[38;5;246m\u001b[23m, flight \u001b[3m\u001b[38;5;246m<int>\u001b[38;5;246m\u001b[23m, tailnum \u001b[3m\u001b[38;5;246m<chr>\u001b[38;5;246m\u001b[23m, origin \u001b[3m\u001b[38;5;246m<chr>\u001b[38;5;246m\u001b[23m, dest \u001b[3m\u001b[38;5;246m<chr>\u001b[38;5;246m\u001b[23m,\n",
      "#   air_time \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, distance \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, hour \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, minute \u001b[3m\u001b[38;5;246m<dbl>\u001b[38;5;246m\u001b[23m, time_hour \u001b[3m\u001b[38;5;246m<dttm>\u001b[38;5;246m\u001b[23m\u001b[39m\n"
     ]
    }
   ],
   "source": [
    "library('nycflights13')\n",
    "\n",
    "flights %>% print"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[38;5;246m# A tibble: 16 x 2\u001b[39m\n",
      "   carrier name                       \n",
      "   \u001b[3m\u001b[38;5;246m<chr>\u001b[39m\u001b[23m   \u001b[3m\u001b[38;5;246m<chr>\u001b[39m\u001b[23m                      \n",
      "\u001b[38;5;250m 1\u001b[39m 9E      Endeavor Air Inc.          \n",
      "\u001b[38;5;250m 2\u001b[39m AA      American Airlines Inc.     \n",
      "\u001b[38;5;250m 3\u001b[39m AS      Alaska Airlines Inc.       \n",
      "\u001b[38;5;250m 4\u001b[39m B6      JetBlue Airways            \n",
      "\u001b[38;5;250m 5\u001b[39m DL      Delta Air Lines Inc.       \n",
      "\u001b[38;5;250m 6\u001b[39m EV      ExpressJet Airlines Inc.   \n",
      "\u001b[38;5;250m 7\u001b[39m F9      Frontier Airlines Inc.     \n",
      "\u001b[38;5;250m 8\u001b[39m FL      AirTran Airways Corporation\n",
      "\u001b[38;5;250m 9\u001b[39m HA      Hawaiian Airlines Inc.     \n",
      "\u001b[38;5;250m10\u001b[39m MQ      Envoy Air                  \n",
      "\u001b[38;5;250m11\u001b[39m OO      SkyWest Airlines Inc.      \n",
      "\u001b[38;5;250m12\u001b[39m UA      United Air Lines Inc.      \n",
      "\u001b[38;5;250m13\u001b[39m US      US Airways Inc.            \n",
      "\u001b[38;5;250m14\u001b[39m VX      Virgin America             \n",
      "\u001b[38;5;250m15\u001b[39m WN      Southwest Airlines Co.     \n",
      "\u001b[38;5;250m16\u001b[39m YV      Mesa Airlines Inc.         \n"
     ]
    }
   ],
   "source": [
    "airlines %>% print"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Joining, by = \"carrier\"\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[38;5;246m# A tibble: 336,776 x 6\u001b[39m\n",
      "   carrier  year month   day dep_time name                    \n",
      "   \u001b[3m\u001b[38;5;246m<chr>\u001b[39m\u001b[23m   \u001b[3m\u001b[38;5;246m<int>\u001b[39m\u001b[23m \u001b[3m\u001b[38;5;246m<int>\u001b[39m\u001b[23m \u001b[3m\u001b[38;5;246m<int>\u001b[39m\u001b[23m    \u001b[3m\u001b[38;5;246m<int>\u001b[39m\u001b[23m \u001b[3m\u001b[38;5;246m<chr>\u001b[39m\u001b[23m                   \n",
      "\u001b[38;5;250m 1\u001b[39m UA       \u001b[4m2\u001b[24m013     1     1      517 United Air Lines Inc.   \n",
      "\u001b[38;5;250m 2\u001b[39m UA       \u001b[4m2\u001b[24m013     1     1      533 United Air Lines Inc.   \n",
      "\u001b[38;5;250m 3\u001b[39m AA       \u001b[4m2\u001b[24m013     1     1      542 American Airlines Inc.  \n",
      "\u001b[38;5;250m 4\u001b[39m B6       \u001b[4m2\u001b[24m013     1     1      544 JetBlue Airways         \n",
      "\u001b[38;5;250m 5\u001b[39m DL       \u001b[4m2\u001b[24m013     1     1      554 Delta Air Lines Inc.    \n",
      "\u001b[38;5;250m 6\u001b[39m UA       \u001b[4m2\u001b[24m013     1     1      554 United Air Lines Inc.   \n",
      "\u001b[38;5;250m 7\u001b[39m B6       \u001b[4m2\u001b[24m013     1     1      555 JetBlue Airways         \n",
      "\u001b[38;5;250m 8\u001b[39m EV       \u001b[4m2\u001b[24m013     1     1      557 ExpressJet Airlines Inc.\n",
      "\u001b[38;5;250m 9\u001b[39m B6       \u001b[4m2\u001b[24m013     1     1      557 JetBlue Airways         \n",
      "\u001b[38;5;250m10\u001b[39m AA       \u001b[4m2\u001b[24m013     1     1      558 American Airlines Inc.  \n",
      "\u001b[38;5;246m# … with 336,766 more rows\u001b[39m\n"
     ]
    }
   ],
   "source": [
    "flights %>%\n",
    "    select(carrier, year, month, day, dep_time) %>%\n",
    "    left_join(airlines) %>%\n",
    "    print"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[38;5;246m# A tibble: 150 x 5\u001b[39m\n",
      "   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n",
      "          \u001b[3m\u001b[38;5;246m<dbl>\u001b[39m\u001b[23m       \u001b[3m\u001b[38;5;246m<dbl>\u001b[39m\u001b[23m        \u001b[3m\u001b[38;5;246m<dbl>\u001b[39m\u001b[23m       \u001b[3m\u001b[38;5;246m<dbl>\u001b[39m\u001b[23m \u001b[3m\u001b[38;5;246m<fct>\u001b[39m\u001b[23m  \n",
      "\u001b[38;5;250m 1\u001b[39m          5.1         3.5          1.4         0.2 setosa \n",
      "\u001b[38;5;250m 2\u001b[39m          4.9         3            1.4         0.2 setosa \n",
      "\u001b[38;5;250m 3\u001b[39m          4.7         3.2          1.3         0.2 setosa \n",
      "\u001b[38;5;250m 4\u001b[39m          4.6         3.1          1.5         0.2 setosa \n",
      "\u001b[38;5;250m 5\u001b[39m          5           3.6          1.4         0.2 setosa \n",
      "\u001b[38;5;250m 6\u001b[39m          5.4         3.9          1.7         0.4 setosa \n",
      "\u001b[38;5;250m 7\u001b[39m          4.6         3.4          1.4         0.3 setosa \n",
      "\u001b[38;5;250m 8\u001b[39m          5           3.4          1.5         0.2 setosa \n",
      "\u001b[38;5;250m 9\u001b[39m          4.4         2.9          1.4         0.2 setosa \n",
      "\u001b[38;5;250m10\u001b[39m          4.9         3.1          1.5         0.1 setosa \n",
      "\u001b[38;5;246m# … with 140 more rows\u001b[39m\n"
     ]
    }
   ],
   "source": [
    "iris %>% \n",
    "    as_tibble() %>%\n",
    "    print"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[38;5;246m# A tibble: 600 x 4\u001b[39m\n",
      "   Species   row key          value\n",
      "   \u001b[3m\u001b[38;5;246m<fct>\u001b[39m\u001b[23m   \u001b[3m\u001b[38;5;246m<int>\u001b[39m\u001b[23m \u001b[3m\u001b[38;5;246m<chr>\u001b[39m\u001b[23m        \u001b[3m\u001b[38;5;246m<dbl>\u001b[39m\u001b[23m\n",
      "\u001b[38;5;250m 1\u001b[39m setosa      1 Sepal.Length   5.1\n",
      "\u001b[38;5;250m 2\u001b[39m setosa      2 Sepal.Length   4.9\n",
      "\u001b[38;5;250m 3\u001b[39m setosa      3 Sepal.Length   4.7\n",
      "\u001b[38;5;250m 4\u001b[39m setosa      4 Sepal.Length   4.6\n",
      "\u001b[38;5;250m 5\u001b[39m setosa      5 Sepal.Length   5  \n",
      "\u001b[38;5;250m 6\u001b[39m setosa      6 Sepal.Length   5.4\n",
      "\u001b[38;5;250m 7\u001b[39m setosa      7 Sepal.Length   4.6\n",
      "\u001b[38;5;250m 8\u001b[39m setosa      8 Sepal.Length   5  \n",
      "\u001b[38;5;250m 9\u001b[39m setosa      9 Sepal.Length   4.4\n",
      "\u001b[38;5;250m10\u001b[39m setosa     10 Sepal.Length   4.9\n",
      "\u001b[38;5;246m# … with 590 more rows\u001b[39m\n"
     ]
    }
   ],
   "source": [
    "iris %>%\n",
    "    as_tibble() %>%\n",
    "    mutate(row = row_number()) %>%\n",
    "    gather(key, value, -Species, -row) %>%\n",
    "    print"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[38;5;246m# A tibble: 150 x 6\u001b[39m\n",
      "   Species   row Petal.Length Petal.Width Sepal.Length Sepal.Width\n",
      "   \u001b[3m\u001b[38;5;246m<fct>\u001b[39m\u001b[23m   \u001b[3m\u001b[38;5;246m<int>\u001b[39m\u001b[23m        \u001b[3m\u001b[38;5;246m<dbl>\u001b[39m\u001b[23m       \u001b[3m\u001b[38;5;246m<dbl>\u001b[39m\u001b[23m        \u001b[3m\u001b[38;5;246m<dbl>\u001b[39m\u001b[23m       \u001b[3m\u001b[38;5;246m<dbl>\u001b[39m\u001b[23m\n",
      "\u001b[38;5;250m 1\u001b[39m setosa      1          1.4         0.2          5.1         3.5\n",
      "\u001b[38;5;250m 2\u001b[39m setosa      2          1.4         0.2          4.9         3  \n",
      "\u001b[38;5;250m 3\u001b[39m setosa      3          1.3         0.2          4.7         3.2\n",
      "\u001b[38;5;250m 4\u001b[39m setosa      4          1.5         0.2          4.6         3.1\n",
      "\u001b[38;5;250m 5\u001b[39m setosa      5          1.4         0.2          5           3.6\n",
      "\u001b[38;5;250m 6\u001b[39m setosa      6          1.7         0.4          5.4         3.9\n",
      "\u001b[38;5;250m 7\u001b[39m setosa      7          1.4         0.3          4.6         3.4\n",
      "\u001b[38;5;250m 8\u001b[39m setosa      8          1.5         0.2          5           3.4\n",
      "\u001b[38;5;250m 9\u001b[39m setosa      9          1.4         0.2          4.4         2.9\n",
      "\u001b[38;5;250m10\u001b[39m setosa     10          1.5         0.1          4.9         3.1\n",
      "\u001b[38;5;246m# … with 140 more rows\u001b[39m\n"
     ]
    }
   ],
   "source": [
    "iris %>%\n",
    "    as_tibble() %>%\n",
    "    mutate(row = row_number()) %>%\n",
    "    gather(key, value, -Species, -row) %>%\n",
    "    spread(key, value) %>%\n",
    "    print"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Tidy data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "From \"R for Data Science\"\n",
    "1. Each variable must have its own column.\n",
    "1. Each observation must have its own row.\n",
    "1. Each value must have its own cell."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[38;5;246m# A tibble: 6 x 4\u001b[39m\n",
      "  country      year  cases population\n",
      "  \u001b[3m\u001b[38;5;246m<chr>\u001b[39m\u001b[23m       \u001b[3m\u001b[38;5;246m<int>\u001b[39m\u001b[23m  \u001b[3m\u001b[38;5;246m<int>\u001b[39m\u001b[23m      \u001b[3m\u001b[38;5;246m<int>\u001b[39m\u001b[23m\n",
      "\u001b[38;5;250m1\u001b[39m Afghanistan  \u001b[4m1\u001b[24m999    745   19\u001b[4m9\u001b[24m\u001b[4m8\u001b[24m\u001b[4m7\u001b[24m071\n",
      "\u001b[38;5;250m2\u001b[39m Afghanistan  \u001b[4m2\u001b[24m000   \u001b[4m2\u001b[24m666   20\u001b[4m5\u001b[24m\u001b[4m9\u001b[24m\u001b[4m5\u001b[24m360\n",
      "\u001b[38;5;250m3\u001b[39m Brazil       \u001b[4m1\u001b[24m999  \u001b[4m3\u001b[24m\u001b[4m7\u001b[24m737  172\u001b[4m0\u001b[24m\u001b[4m0\u001b[24m\u001b[4m6\u001b[24m362\n",
      "\u001b[38;5;250m4\u001b[39m Brazil       \u001b[4m2\u001b[24m000  \u001b[4m8\u001b[24m\u001b[4m0\u001b[24m488  174\u001b[4m5\u001b[24m\u001b[4m0\u001b[24m\u001b[4m4\u001b[24m898\n",
      "\u001b[38;5;250m5\u001b[39m China        \u001b[4m1\u001b[24m999 \u001b[4m2\u001b[24m\u001b[4m1\u001b[24m\u001b[4m2\u001b[24m258 \u001b[4m1\u001b[24m272\u001b[4m9\u001b[24m\u001b[4m1\u001b[24m\u001b[4m5\u001b[24m272\n",
      "\u001b[38;5;250m6\u001b[39m China        \u001b[4m2\u001b[24m000 \u001b[4m2\u001b[24m\u001b[4m1\u001b[24m\u001b[4m3\u001b[24m766 \u001b[4m1\u001b[24m280\u001b[4m4\u001b[24m\u001b[4m2\u001b[24m\u001b[4m8\u001b[24m583\n"
     ]
    }
   ],
   "source": [
    "table1 %>% print"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[38;5;246m# A tibble: 3 x 3\u001b[39m\n",
      "  country     `1999` `2000`\n",
      "\u001b[38;5;250m*\u001b[39m \u001b[3m\u001b[38;5;246m<chr>\u001b[39m\u001b[23m        \u001b[3m\u001b[38;5;246m<int>\u001b[39m\u001b[23m  \u001b[3m\u001b[38;5;246m<int>\u001b[39m\u001b[23m\n",
      "\u001b[38;5;250m1\u001b[39m Afghanistan    745   \u001b[4m2\u001b[24m666\n",
      "\u001b[38;5;250m2\u001b[39m Brazil       \u001b[4m3\u001b[24m\u001b[4m7\u001b[24m737  \u001b[4m8\u001b[24m\u001b[4m0\u001b[24m488\n",
      "\u001b[38;5;250m3\u001b[39m China       \u001b[4m2\u001b[24m\u001b[4m1\u001b[24m\u001b[4m2\u001b[24m258 \u001b[4m2\u001b[24m\u001b[4m1\u001b[24m\u001b[4m3\u001b[24m766\n"
     ]
    }
   ],
   "source": [
    "table4a %>% print"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[38;5;246m# A tibble: 150 x 5\u001b[39m\n",
      "   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n",
      "          \u001b[3m\u001b[38;5;246m<dbl>\u001b[39m\u001b[23m       \u001b[3m\u001b[38;5;246m<dbl>\u001b[39m\u001b[23m        \u001b[3m\u001b[38;5;246m<dbl>\u001b[39m\u001b[23m       \u001b[3m\u001b[38;5;246m<dbl>\u001b[39m\u001b[23m \u001b[3m\u001b[38;5;246m<fct>\u001b[39m\u001b[23m  \n",
      "\u001b[38;5;250m 1\u001b[39m          5.1         3.5          1.4         0.2 setosa \n",
      "\u001b[38;5;250m 2\u001b[39m          4.9         3            1.4         0.2 setosa \n",
      "\u001b[38;5;250m 3\u001b[39m          4.7         3.2          1.3         0.2 setosa \n",
      "\u001b[38;5;250m 4\u001b[39m          4.6         3.1          1.5         0.2 setosa \n",
      "\u001b[38;5;250m 5\u001b[39m          5           3.6          1.4         0.2 setosa \n",
      "\u001b[38;5;250m 6\u001b[39m          5.4         3.9          1.7         0.4 setosa \n",
      "\u001b[38;5;250m 7\u001b[39m          4.6         3.4          1.4         0.3 setosa \n",
      "\u001b[38;5;250m 8\u001b[39m          5           3.4          1.5         0.2 setosa \n",
      "\u001b[38;5;250m 9\u001b[39m          4.4         2.9          1.4         0.2 setosa \n",
      "\u001b[38;5;250m10\u001b[39m          4.9         3.1          1.5         0.1 setosa \n",
      "\u001b[38;5;246m# … with 140 more rows\u001b[39m\n"
     ]
    }
   ],
   "source": [
    "iris %>%\n",
    "    as_tibble() %>%\n",
    "    print"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Slideshow",
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
